/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class Tachyon {
  constructor()
  /**
   * Add a GET route handler with Express-like syntax
   * Supports both sync and async handlers
   *
   * Example usage:
   * ```javascript
   * app.get('/', (req, res) => {
   *   res.send('Hello World!')
   * })
   *
   * app.get('/async', async (req, res) => {
   *   res.send('Async Hello!')
   * })
   * ```
   */
  get(
    route: string,
    callback:
      | ((req: TachyonRequest, res: TachyonResponse) => void)
      | ((req: TachyonRequest, res: TachyonResponse) => Promise<void>),
  ): void
  /**
   * Add a POST route handler with Express-like syntax
   * Supports both sync and async handlers
   *
   * Example usage:
   * ```javascript
   * app.post('/users', (req, res) => {
   *   res.send('User created!')
   * })
   *
   * app.post('/users', async (req, res) => {
   *   await db.save(req.body)
   *   res.send('User created!')
   * })
   * ```
   */
  post(
    route: string,
    callback:
      | ((req: TachyonRequest, res: TachyonResponse) => void)
      | ((req: TachyonRequest, res: TachyonResponse) => Promise<void>),
  ): void
  /**
   * Add a PUT route handler with Express-like syntax
   * Supports both sync and async handlers
   *
   * Example usage:
   * ```javascript
   * app.put('/users/:id', (req, res) => {
   *   res.send('User updated!')
   * })
   * ```
   */
  put(
    route: string,
    callback:
      | ((req: TachyonRequest, res: TachyonResponse) => void)
      | ((req: TachyonRequest, res: TachyonResponse) => Promise<void>),
  ): void
  /**
   * Add a DELETE route handler with Express-like syntax
   * Supports both sync and async handlers
   *
   * Example usage:
   * ```javascript
   * app.delete('/users/:id', (req, res) => {
   *   res.send('User deleted!')
   * })
   * ```
   */
  delete(
    route: string,
    callback:
      | ((req: TachyonRequest, res: TachyonResponse) => void)
      | ((req: TachyonRequest, res: TachyonResponse) => Promise<void>),
  ): void
  /**
   * Add a PATCH route handler with Express-like syntax
   * Supports both sync and async handlers
   *
   * Example usage:
   * ```javascript
   * app.patch('/users/:id', (req, res) => {
   *   res.send('User patched!')
   * })
   * ```
   */
  patch(
    route: string,
    callback:
      | ((req: TachyonRequest, res: TachyonResponse) => void)
      | ((req: TachyonRequest, res: TachyonResponse) => Promise<void>),
  ): void
  routes(): Array<string>
  listen(port: number): Promise<void>
}

export declare class TachyonResponse {
  constructor()
  send(msg?: any | undefined | null): void
  status(code: number): TachyonResponse
}

export declare function tachyon(): Tachyon

export interface TachyonRequest {
  body: any
}
